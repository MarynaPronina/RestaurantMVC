// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantDomain.Model;

#nullable disable

namespace RestaurantInfrastructure.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20250611141919_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantDomain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.Dish", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("DIsh", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.DishCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DishId");

                    b.ToTable("DishCategory", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.DishOrder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("DishOrder", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Sum")
                        .HasColumnType("money");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TableId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.Table", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.Worker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CityName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Worker", (string)null);
                });

            modelBuilder.Entity("RestaurantDomain.Model.DishCategory", b =>
                {
                    b.HasOne("RestaurantDomain.Model.Category", "Category")
                        .WithMany("DishCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_DishCategory_Category");

                    b.HasOne("RestaurantDomain.Model.Dish", "Dish")
                        .WithMany("DishCategories")
                        .HasForeignKey("DishId")
                        .IsRequired()
                        .HasConstraintName("FK_DishCategory_DIsh");

                    b.Navigation("Category");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("RestaurantDomain.Model.DishOrder", b =>
                {
                    b.HasOne("RestaurantDomain.Model.Dish", "Dish")
                        .WithMany("DishOrders")
                        .HasForeignKey("DishId")
                        .IsRequired()
                        .HasConstraintName("FK_DishOrder_DIsh");

                    b.HasOne("RestaurantDomain.Model.Order", "Order")
                        .WithMany("DishOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_DishOrder_Order");

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Order", b =>
                {
                    b.HasOne("RestaurantDomain.Model.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Client");

                    b.HasOne("RestaurantDomain.Model.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Tables");

                    b.Navigation("Client");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Worker", b =>
                {
                    b.HasOne("RestaurantDomain.Model.Client", "Client")
                        .WithMany("Workers")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Worker_Client");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Category", b =>
                {
                    b.Navigation("DishCategories");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Dish", b =>
                {
                    b.Navigation("DishCategories");

                    b.Navigation("DishOrders");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Order", b =>
                {
                    b.Navigation("DishOrders");
                });

            modelBuilder.Entity("RestaurantDomain.Model.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
